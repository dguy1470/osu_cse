import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author David Neal Jr
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * Print the beginning statements for an html doc
         */
        out.println("<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>");
        out.println(
                "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" "
                        + "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">");
        out.println("<html xmlns=\"http://www.w3.org/1999/xhtml\">");

        out.println("<head>");

        /*
         * Use getChildElement to get the title tag and output title
         */
        //edit added .child(index)
        int index = getChildElement(channel, "title");
        String title = (channel.child(index).child(0).label());

        out.println("<title>" + title + "</title>");

        out.println("</head>");
        out.println("<body>");

        out.print("\n");
        // out.print("<p> <b>" + title + " </b></p>");

        /*
         * Use getChildElement to get the link tag and output link
         */
        index = getChildElement(channel, "link");
        String link = (channel.child(index).child(0).label());

        out.println("<h1><a href=\"" + link + "\">" + "<b>" + title + " </b>");
        out.println("</a></h1>");
        out.println("<channel>");
        out.println("</channel>");

        /*
         * Use getChildElement to get the description tag if one is not found
         * inform the user
         */
        out.println("<p>");
        index = getChildElement(channel, "description");

        String description;
        if (index > -1) {
            description = (channel.child(index).child(0).label());
            out.println(description);
        }
        out.println("</p>");

        /*
         * create the table
         */
        out.println("<table border = \"1\">");
        out.println("<tr>");

        out.println("<th> Date </th>");
        out.println("<th> Source </th>");
        out.println("<th> News </th>");

        out.println("</tr>");
        out.print("\n");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //Our closing tags that will go at the end of our html doc
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        /*
         * initialize index at -1, if no child element is found it will remain
         * -1 to the end
         *
         * if xml has a tag and that tags label has what we're looking for,
         * return the index of the child
         */
        int index = -1;
        int i = 0;
        boolean found = false;
        while (i < xml.numberOfChildren() && !found) {
            if ((xml.child(i).isTag()) && (xml.child(i).label().equals(tag))) {
                index = i;
                found = true;
            }
            i++;
        }

        /*
         *
         * for (int i = 0; i < xml.numberOfChildren(); i++) { if
         * ((xml.child(i).isTag()) && (xml.child(i).label().equals(tag))) {
         * index = i; } }
         */

        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");

        // use getChildElement to find pubDate tag and print it to the table
        int index = getChildElement(item, "pubDate");
        String pubDate;
        if (index < 0) {
            pubDate = ("There is no Date");
        } else {
            pubDate = (item.child(index).child(0).label());
        }
        out.println("<td>" + pubDate + "</td>");

        // use getChildElement to find pubDate tag and print it to the table
        index = getChildElement(item, "link");
        String link;
        if (index < 0) {
            link = ("There is no Date");
        } else {
            link = (item.child(index).child(0).label());
        }

        // use getChildElement to find source tag and print it to the table
        index = getChildElement(item, "source");
        String source;
        if (index < 0) {
            source = ("There is no Source");
        } else {
            source = (item.child(index).child(0).label());
        }
        out.println("<td> <a href=\"" + link + "\">" + source + "</a> </td>");
        //out.println("<td>" + source + "</td>");

        // use getChildElement to find title tag and print it to the table
        index = getChildElement(item, "title");
        String title;
        if (index < 0) {
            title = ("There is no title");
        } else {
            title = (item.child(index).label());
        }
        out.println("<td> <a href=\"" + link + "\">" + title + "</a> </td>");

        out.println("</tr>");
        out.println("");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {

        //open RSS url
        XMLTree xml = new XMLTree1(url);

        /*
         * Check that the input file is an RSS 2.0 file
         */
        if (xml.hasAttribute("version")
                && xml.attributeValue("version").equals("2.0")
                && (xml.label().equals("rss"))) {

            //get name of the out put file
            //out.println(file);

            SimpleWriter fileOutput = new SimpleWriter1L(file);

            XMLTree channel = xml.child(0);

            outputHeader(channel, fileOutput);

            // go through all of channels children, and if has a tag that says item
            // process them using proccessItem
            //This makes up the table
            for (int i = 0; i < channel.numberOfChildren(); i++) {
                if (channel.child(i).isTag()) {
                    if (channel.child(i).label().equals("item")) {
                        XMLTree item = channel.child(i);
                        processItem(item, fileOutput);
                    }
                }
            }
            //print html footer and close flieOutput
            outputFooter(fileOutput);
            fileOutput.close();
        } else {
            out.print(
                    "Incorrect file type entered, please enter an RSS 2.0 file type ");
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        /*
         * Open I/O streams.
         */
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        /*
         * Input the source URL.
         */
        out.println(
                "Enter the name of an XTML file containing a list of RSS 2.0 URLS: ");
        //get xml file
        String xmlName = in.nextLine();
        XMLTree feed = new XMLTree1(xmlName);
        //get file name to create and print list to
        out.println("Enter the name of the the outputfile (include .htlm ) ");
        String filename = in.nextLine();
        SimpleWriter fileOut = new SimpleWriter1L(filename);

        //header title
        fileOut.println("<h1> " + feed.attributeValue("title") + " </h1>");

        // start list
        fileOut.println("<ul>");
        //for each child in feed, find their attributes and run it through processFeed
        for (int i = 0; i < feed.numberOfChildren(); i++) {
            XMLTree rssFeeds = feed.child(i);
            String url = rssFeeds.attributeValue("url");
            String name = rssFeeds.attributeValue("name");
            String file = rssFeeds.attributeValue("file");
            processFeed(url, file, out);
            //print the feeds to the list with the links to open them
            fileOut.println(
                    "<li> <a href=\"https://web.cse.ohio-state.edu/software/"
                            + "2221/web-sw1/assignments/projects/rss-aggregator/"
                            + file + "\">" + name + "</a> </li>");
        }
        //end list
        fileOut.println("</ul>");
        /*
         * Close input and output streams
         */
        fileOut.close();
        in.close();
        out.close();
    }
}
